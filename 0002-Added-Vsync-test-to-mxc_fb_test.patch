From 2a2ac064528ea90e07842c710d2767bf2b7c32a9 Mon Sep 17 00:00:00 2001
From: Ankit Patel <ankit.patel@nxp.com>
Date: Mon, 23 Jan 2017 14:33:52 +0530
Subject: [PATCH 2/4] Added Vsync test to mxc_fb_test.

Signed-off-by: Ankit Patel <ankit.patel@nxp.com>
---
 test/mxc_fb_test/Android.mk          |  23 ++++++++
 test/mxc_fb_test/mxc_fb_vsync_test.c | 111 ++++++++++++++++++++++++++---------
 2 files changed, 107 insertions(+), 27 deletions(-)
 create mode 100644 test/mxc_fb_test/Android.mk

diff --git a/test/mxc_fb_test/Android.mk b/test/mxc_fb_test/Android.mk
new file mode 100644
index 0000000..f7a80f8
--- /dev/null
+++ b/test/mxc_fb_test/Android.mk
@@ -0,0 +1,23 @@
+ifeq ($(HAVE_FSL_IMX_IPU),true)
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := mxc_fb_vsync_test.c
+LOCAL_CFLAGS += -DBUILD_FOR_ANDROID
+LOCAL_C_INCLUDES += $(LOCAL_PATH)
+LOCAL_SHARED_LIBRARIES := libutils libc
+LOCAL_MODULE := mxc_fb_vsync_test
+LOCAL_MODULE_TAGS := tests
+include $(BUILD_EXECUTABLE)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := mxc_set_fb_test.c
+LOCAL_CFLAGS += -DBUILD_FOR_ANDROID
+LOCAL_C_INCLUDES += $(LOCAL_PATH)
+LOCAL_SHARED_LIBRARIES := libutils libc
+LOCAL_MODULE := mxc_set_fb_test
+LOCAL_MODULE_TAGS := tests
+include $(BUILD_EXECUTABLE)
+
+endif
diff --git a/test/mxc_fb_test/mxc_fb_vsync_test.c b/test/mxc_fb_test/mxc_fb_vsync_test.c
index a4852de..b726096 100644
--- a/test/mxc_fb_test/mxc_fb_vsync_test.c
+++ b/test/mxc_fb_test/mxc_fb_vsync_test.c
@@ -22,7 +22,7 @@
 
 /* Verification Test Environment Include Files */
 #include <sys/ioctl.h>
-#include <sys/fcntl.h>
+//#include <sys/fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
@@ -30,6 +30,28 @@
 
 #include <linux/mxcfb.h>
 
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <stdint.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <sys/time.h>
+#include <unistd.h>
+#include <asm/types.h>
+#include <linux/videodev2.h>
+#include <sys/mman.h>
+#include <math.h>
+#include <string.h>
+#include <malloc.h>
+#include <sys/time.h>
+
+#include <linux/mxcfb.h>
+#include <linux/mxc_v4l2.h>
+#include <linux/ipu.h>
 
 int fd_fb = 0;
 
@@ -38,53 +60,88 @@ int fd_fb = 0;
 int
 main(int argc, char **argv)
 {
-        int count;
+	int count;
 	int i;
 
-        int retval = 0;
+	int sleeptime;
+	int retval = 0;
 	unsigned int fps;
 	unsigned int total_time;
-        char fbdev[] = "/dev/fb0";
-        struct timeval tv_start, tv_current;
+	unsigned long long timestamp_prev = 0, timestamp_next = 0;
+	unsigned long long start, total = 0;
+	static unsigned long long diff[120] = {0};
+	unsigned long long temp, calc_fps;
+#ifdef BUILD_FOR_ANDROID
+	char fbdev[] = "/dev/graphics/fb0";
+#else
+	char fbdev[] = "/dev/fb0";
+#endif
+	struct timeval tv_start, tv_current;
+
+	if (argc != 4) {
+		printf("Usage:\n\n%s <fb #> <count> <sleeptime>\n\n", argv[0]);
+		return -1;
+	}
 
-        if (argc != 3) {
-                printf("Usage:\n\n%s <fb #> <count>\n\n", argv[0]);
-                return -1;
-        }
+	sleeptime = atoi(argv[3]);
+	sleep(sleeptime);
+	count = atoi(argv[2]);
+#ifdef BUILD_FOR_ANDROID
+	fbdev[16] = argv[1][0];
+#else
+	fbdev[7] = argv[1][0];
+#endif
 
-        count = atoi(argv[2]);
-        fbdev[7] = argv[1][0];
+	printf(" <fb %s>, count:%d\n\n", fbdev, count);
 
-        if ((fd_fb = open(fbdev, O_RDWR, 0)) < 0)
-        {
-                printf("Unable to open %s\n", fbdev);
-                retval = -1;
-                goto err0;
-        }
+	if ((fd_fb = open(fbdev, O_RDWR, 0)) < 0)
+	{
+		printf("Unable to open %s\n", fbdev);
+		retval = -1;
+		goto err0;
+	}
 
 	gettimeofday(&tv_start, 0);
 	for (i = 0; i < count; i++) {
-	        retval = ioctl(fd_fb, MXCFB_WAIT_FOR_VSYNC, &i);
-        	if (retval < 0)
-        	{
-                	goto err1;
-        	}
+		retval = ioctl(fd_fb, MXCFB_WAIT_FOR_VSYNC, &timestamp_next);
+		if (retval < 0)
+		{
+			goto err1;
+		}
+
+		if(i == 0)
+			start = timestamp_next;
+
+		if(i >= 1)
+			diff[i] = timestamp_next - timestamp_prev;
+		total = timestamp_next - start;
+		timestamp_prev = timestamp_next;
 	}
 	gettimeofday(&tv_current, 0);
+	//printf("count:%u, i:%u\n", count, i);
 
-        total_time = (tv_current.tv_sec - tv_start.tv_sec) * 1000000L;
-        total_time += tv_current.tv_usec - tv_start.tv_usec;
+	total_time = (tv_current.tv_sec - tv_start.tv_sec) * 1000000L;
+	total_time += tv_current.tv_usec - tv_start.tv_usec;
 	fps = (i * 1000000ULL) / total_time;
-        printf("total time for %u frames = %u us =  %lld fps\n", i, total_time, (i * 1000000ULL) / total_time);
+	printf("Application :: total time for %d frames = %u us =  %lld fps\n", i, total_time, (i * 1000000ULL) / total_time);
+
+	temp = count;
+	temp *= 1000000000L;
+	calc_fps = temp / total;
 
+	printf(" Kernel time :: start to end time diff: %llu calculated fps = %llu temp : %llu\n", total, calc_fps, temp);
 	if (fps > 45 && fps < 80)
 		retval = 0;
 	else
 		retval = -1;
 
 err1:
-        close(fd_fb);
+/*
+	for(i = 0; i < count; i++)
+		printf("diff = %llu\n",diff[i]);
+*/
+	close(fd_fb);
 err0:
-        return retval;
+	return retval;
 }
 
-- 
1.9.1

